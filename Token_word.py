"""
|||||||||||||||||||||||||||||||||||||||||||||||||||||
Generation_token
|||||||||||||||||||||||||||||||||||||||||||||||||||||
"""
class OCR_TOKEN():
	def __init__(self):
		self.token = self.readTK()
	def readTK(self):
		token_add = {
			0: 'п', 1: 'ж', 2: 'к', 3: 'Щ', 4: '\n', 5: 'в', 6: 'J', 7: 'P', 8: '9', 9: '2', 10: 'В', 11: 'ё', 12: 'Н',
		 13: 'v', 14: 'я', 15: ' ', 16: 'р', 17: '3', 18: 'i', 19: 'И', 20: 'ф', 21: 'm', 22: 'Я', 23: 'q', 24: 'Т',
		 25: 'Z', 26: 'f', 27: 'k', 28: 'Г', 29: 'I', 30: 'R', 31: 'Ы', 32: 'x', 33: 'М', 34: 'у', 35: 'Ь', 36: 'O',
		 37: '=', 38: 't', 39: 'M', 40: '5', 41: 'ш', 42: 'О', 43: '0', 44: 'l', 45: 'Ж', 46: '.', 47: 'ч', 48: 'э',
		 49: 'E', 50: 'и', 51: 'е', 52: 'б', 53: 'o', 54: 'Е', 55: 'w', 56: 'ь', 57: '7', 58: 'о', 59: 'У', 60: 'а',
		 61: 'ц', 62: 'ы', 63: 'Р', 64: 'n', 65: 'L', 66: 'y', 67: 'Ч', 68: 'Э', 69: 'Б', 70: 'А', 71: '6', 72: 'З',
		 73: 'Л', 74: 'Q', 75: 'U', 76: 'H', 77: 'B', 78: 'C', 79: 'b', 80: 'ю', 81: 'c', 82: 'н', 83: 'r', 84: 'т',
		 85: 'г', 86: 'A', 87: 'G', 88: 'N', 89: 'V', 90: 'Д', 91: 'Ш', 92: 'j', 93: 'Y', 94: 'Ј', 95: 'W', 96: 'F',
		 97: 'с', 98: 'Ю', 99: 'u', 100: 'T', 101: 'щ', 102: 'Х', 103: 's', 104: 'х', 105: 'Ц', 106: 'z', 107: 'p',
		 108: 'д', 109: 'e', 110: 'з', 111: 'X', 112: 'Ф', 113: 'Й', 114: '4', 115: '8', 116: 'л', 117: ',', 118: '—',
		 119: '?', 120: 'П', 121: 'a', 122: 'h', 123: 'ъ', 124: 'С', 125: 'К', 126: 'Ъ', 127: 'D', 128: 'S', 129: 'd',
		 130: 'м', 131: 'й', 132: '1', 133: 'g'
		}
		return token_add
	def Cyrillic_pattern(self, x=None):
		Muder = "©:;…’'«»∞\xa0!@#$%^&*()_+-{}[]'\"|/<>~`"
		pattern = {0: 'А', 1: 'Б', 2: 'В',
				   3: 'Г', 4: 'Д', 5: 'Е',
				   6: 'Ё', 7: 'Ж', 8: 'З',
				   9: 'И', 10: 'Й', 11: 'К',
				   12: 'Л', 13: 'М', 14: 'Н',
				   15: 'О', 16: 'П', 17: 'Р',
				   18: 'С', 19: 'Т', 20: 'У',
				   21: 'Ф', 22: 'Х', 23: 'Ц',
				   24: 'Ч', 25: 'Ш', 26: 'Щ',
				   27: 'Ъ', 28: 'Ы', 29: 'Ь',
				   30: 'Э', 31: 'Ю', 32: 'Я'}
		return pattern[x]
	def Decoding(self, keys):
		string = ''.join([self.token[int(i)] for i in keys])
		return string.rstrip()

